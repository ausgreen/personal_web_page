<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A Pelican Blog - Python</title><link href="/" rel="alternate"></link><link href="/feeds/python.atom.xml" rel="self"></link><id>/</id><updated>2017-11-24T12:00:00+00:00</updated><entry><title>Python development environment</title><link href="/python-development-environment.html" rel="alternate"></link><published>2017-11-24T12:00:00+00:00</published><updated>2017-11-24T12:00:00+00:00</updated><author><name></name></author><id>tag:None,2017-11-24:/python-development-environment.html</id><summary type="html">&lt;p&gt;I haven't been programming in python for very long.  It has a lot of features that immediately drew me in over other languages.&lt;br&gt;
Most importantly, it enabled me to get things done.  However, when I started to use 3rd party packages, my project dependencies began to pollute my default python …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I haven't been programming in python for very long.  It has a lot of features that immediately drew me in over other languages.&lt;br&gt;
Most importantly, it enabled me to get things done.  However, when I started to use 3rd party packages, my project dependencies began to pollute my default python installation.&lt;/p&gt;
&lt;p&gt;No one should have to worry about which of the four different versions of "requests" they are using in their python script.&lt;/p&gt;
&lt;p&gt;After reading through this document, you will be able develop in python without having to worry about Python version, or dependency hell.&lt;/p&gt;
&lt;h3&gt;What Tools do I Use&lt;/h3&gt;
&lt;h4&gt;1. &lt;a href="https://www.jetbrains.com/pycharm/"&gt;Jetbrains PyCharmCE&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Some people prefer to use Vi, or Emacs and develop entirely within their terminal.  I am not one of those people.  I do not consider myself to be a native of *nix and need a little assistance to visualize file structures.&lt;/p&gt;
&lt;p&gt;Pycharm is a python specific IDE with some great features.  It enables me to focus on the code and prevents my brain from context switching.&lt;/p&gt;
&lt;h4&gt;2. &lt;a href="https://github.com/pyenv/pyenv"&gt;Pyenv&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/pyenv/pyenv#homebrew-on-mac-os-x"&gt;How to install pyenv&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I use pyenv to effortlessly switch between versions of python.  I really wanted to develop in Python 3.x, but was having difficulty dealing with macOS's default python 2.7 installation. &lt;/p&gt;
&lt;h6&gt;Using pyenv to install a new version of python&lt;/h6&gt;
&lt;p&gt;Pyenv makes it really easy to install a different version of python.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;austin $ pyenv
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;3. &lt;a href="https://virtualenv.pypa.io/en/stable/"&gt;Virtualenv&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://virtualenv.pypa.io/en/stable/installation/"&gt;How to install virtualenv&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>List Comprehensions</title><link href="/list-comprehensions.html" rel="alternate"></link><published>2017-11-06T10:00:00+00:00</published><updated>2017-11-06T10:00:00+00:00</updated><author><name></name></author><id>tag:None,2017-11-06:/list-comprehensions.html</id><summary type="html">&lt;h3&gt;List Comprehensions&lt;/h3&gt;
&lt;p&gt;&lt;img alt="stranger_things_bruteforce_code" src="https://image.ibb.co/fBroQ6/bob_newby_code.png"&gt;&lt;/p&gt;
&lt;p&gt;List comprehensions allow a Python programmer to build lists in a natural and clear manner.
Instead of describing the intricacies of list comprehensions, lets look at a few examples.&lt;/p&gt;
&lt;h5&gt;1. Print a list of the powers of two up to the tenth power:&lt;/h5&gt;
&lt;h6&gt;Here is the output we …&lt;/h6&gt;</summary><content type="html">&lt;h3&gt;List Comprehensions&lt;/h3&gt;
&lt;p&gt;&lt;img alt="stranger_things_bruteforce_code" src="https://image.ibb.co/fBroQ6/bob_newby_code.png"&gt;&lt;/p&gt;
&lt;p&gt;List comprehensions allow a Python programmer to build lists in a natural and clear manner.
Instead of describing the intricacies of list comprehensions, lets look at a few examples.&lt;/p&gt;
&lt;h5&gt;1. Print a list of the powers of two up to the tenth power:&lt;/h5&gt;
&lt;h6&gt;Here is the output we are hoping to obtain:&lt;/h6&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h6&gt;Standard:&lt;/h6&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h6&gt;List Comprehension&lt;/h6&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;power&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this case it is easy to see the benefit of list comprehensions.  The list comprehension &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;builds the list more concisely than the for loop  &lt;/li&gt;
&lt;li&gt;is more explicit (once you learn how to read list comprehensions)&lt;/li&gt;
&lt;li&gt;is faster than the for loop (discussion for another time)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is how I would read that list comprehension in plain English.&lt;/p&gt;
&lt;p&gt;&lt;img alt="list_comprehension_0.png" src="https://image.ibb.co/jD3Dsm/list_comprehension_0.png"&gt;&lt;/p&gt;
&lt;h6&gt;&lt;/h6&gt;</content></entry></feed>